# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
import imaplib  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å IMAP –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
import email  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å email —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
import requests  # –î–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
import json  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON –¥–∞–Ω–Ω—ã–º–∏
from datetime import datetime, timedelta  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
from docx import Document  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Word –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
from aiogram import Bot, Dispatcher, types  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
from aiogram.fsm.storage.memory import MemoryStorage  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
import yaml  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
from aiogram.filters import Command  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
from pprint import pprint  # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
import smtplib  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å SMTP –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
from email.mime.text import MIMEText  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è email —Å–æ–æ–±—â–µ–Ω–∏–π
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import logging  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from aiogram.types import FSInputFile  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
with open('config.yaml', 'r', encoding='utf-8') as file:
    config = yaml.safe_load(file)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TOKEN = config['telegram']['token']  # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
BOT_EMAIL = config['email']['bot_email']  # Email –±–æ—Ç–∞
BOT_EMAIL_PASSWORD = config['email']['bot_password']  # –ü–∞—Ä–æ–ª—å –æ—Ç email –±–æ—Ç–∞
IMAP_SERVER = config['email']['imap_server']  # IMAP —Å–µ—Ä–≤–µ—Ä
TRUETABS_TOKEN = config['truetabs']['token']  # –¢–æ–∫–µ–Ω –¥–ª—è API TrueTabs
TRUETABS_BASE_URL = config['truetabs']['base_url']  # –ë–∞–∑–æ–≤—ã–π URL API TrueTabs
REPORT_OUTPUT_FILE = config['report']['output_file']  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
USER_STATE_FILE = config['report']['user_state_file']  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)  # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
dp = Dispatcher(storage=MemoryStorage())  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_user_states():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        if not os.path.exists(USER_STATE_FILE):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            return {}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        with open(USER_STATE_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            if not content:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                return {}
            
            user_states = json.loads(content)  # –ó–∞–≥—Ä—É–∑–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã datetime
            for user_id in user_states:
                if "last_reminders" in user_states[user_id]:
                    reminders = user_states[user_id]["last_reminders"]
                    for project_name in reminders:
                        if reminders[project_name]:
                            reminders[project_name] = datetime.fromisoformat(reminders[project_name])
            
            return user_states
            
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_user_states(user_states):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª.
    
    Args:
        user_states (dict): –°–ª–æ–≤–∞—Ä—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    states_to_save = {}  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    for user_id, state in user_states.items():
        states_to_save[str(user_id)] = {
            "access": state.get("access", False),
            "email": state.get("email", None),
            "email_password": state.get("email_password", None),
            "smtp_server": state.get("smtp_server", None),
            "smtp_port": state.get("smtp_port", None),
            "last_reminders": {}
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if "last_reminders" in state:
            for project_name, reminder_time in state["last_reminders"].items():
                if isinstance(reminder_time, datetime):
                    states_to_save[str(user_id)]["last_reminders"][project_name] = reminder_time.isoformat()
                else:
                    states_to_save[str(user_id)]["last_reminders"][project_name] = None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    with open(USER_STATE_FILE, 'w', encoding='utf-8') as f:
        json.dump(states_to_save, f, ensure_ascii=False, indent=2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = load_user_states()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        user_id = str(message.from_user.id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_states:
            user_states[user_id] = {
                "access": True,
                "email": None,
                "email_password": None,
                "smtp_server": None,
                "smtp_port": None,
                "imap_server": None,
                "imap_port": None,
                "last_reminders": {}
            }
            save_user_states(user_states)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n"
            "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å email –∏ –ø–∞—Ä–æ–ª—å (—Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É):\n"
            "/set_credentials <email> <–ø–∞—Ä–æ–ª—å>\n"
            "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SMTP —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ—Ä—Ç:\n"
            "/set_smtp <—Å–µ—Ä–≤–µ—Ä> <–ø–æ—Ä—Ç>\n"
            "3Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å IMAP —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ—Ä—Ç:\n"
            "/set_imap <—Å–µ—Ä–≤–µ—Ä> <–ø–æ—Ä—Ç>\n"
            "4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã (–≤—ã–∑—ã–≤–∞–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è smtp –∏ imap —Å–µ—Ä–≤–µ—Ä–æ–≤):\n"
            "/check_settings\n"
            "üìã –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üìä /generate_report - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç\n"
            "üìù /send_a_form - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞\n"
            "‚úîÔ∏è /status - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚è≥ /deadlines - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä—è—â–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã\n"
            "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –ø–æ—á—Ç—É, –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã
        await check_deadline()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /deadlines –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ—Ä—è—â–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤
@dp.message(Command("deadlines"))
async def show_deadlines(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≥–æ—Ä—è—â–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã (–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 3 –¥–Ω—è–º).
    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–¥–ª–∞–π–Ω—ã
        projects = await get_deadlines()
        if not projects:
            await message.answer("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –±–ª–∏–∑–∫–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏.")
            return

        current_date = datetime.now().date()
        urgent_projects = []

        for project_name, current_spending, deadline in projects:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞
                if isinstance(deadline, int):
                    deadline_date = datetime.fromtimestamp(deadline / 1000)
                else:
                    try:
                        deadline_date = datetime.strptime(deadline, '%Y-%m-%d')
                    except ValueError:
                        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {deadline}")
                        continue

                days_left = (deadline_date - datetime.now()).days
                if 0 <= days_left <= 3:  # –ì–æ—Ä—è—â–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã
                    responsible_persons = await get_responsible_persons_for_project(project_name)
                    if days_left == 0:
                        urgent_projects.append(
                            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' —Å–µ–≥–æ–¥–Ω—è ({deadline_date.strftime('%d.%m.%Y')})!"
                        )
                    else:
                        urgent_projects.append(
                            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π ({deadline_date.strftime('%d.%m.%Y')})!"
                        )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")
                continue

        if not urgent_projects:
            await message.answer("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –±–ª–∏–∑–∫–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ—Ä—è—â–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
        response = "üî• –ì–æ—Ä—è—â–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:\n\n" + "\n\n".join(urgent_projects)
        await message.answer(response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ deadlines: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤.")

async def check_deadline():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–∞–∑ –≤ –¥–µ–Ω—å.
    """
    try:
        projects = await get_deadlines()  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–¥–ª–∞–π–Ω—ã
        if not projects:
            logging.info("–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return

        current_date = datetime.now().date()

        for project_name, current_spending, deadline in projects:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime
                if isinstance(deadline, int):
                    deadline_date = datetime.fromtimestamp(deadline / 1000)
                else:
                    try:
                        deadline_date = datetime.strptime(deadline, '%Y-%m-%d')
                    except ValueError:
                        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {deadline}")
                        continue

                days_left = (deadline_date - datetime.now()).days
                if 0 <= days_left <= 3:  # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ 3 –¥–Ω—è –∏–ª–∏ –º–µ–Ω—å—à–µ
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü
                    responsible_persons = await get_responsible_persons_for_project(project_name)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º
                    if days_left == 0:
                        message = (
                            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' —Å–µ–≥–æ–¥–Ω—è ({deadline_date.strftime('%d.%m.%Y')})!"
                        )
                    else:
                        message = (f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π ({deadline_date.strftime('%d.%m.%Y')})!"
                        )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –¥–æ—Å—Ç—É–ø–æ–º
                    for user_id, state in user_states.items():
                        if state.get('access', False):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
                            last_notification = state.get("last_reminders", {}).get(project_name)
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏:
                            # 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ
                            # 2. –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å
                            if not last_notification or last_notification.date() < current_date:
                                try:
                                    await bot.send_message(user_id, message)
                                    user_states[user_id]["last_reminders"][project_name] = datetime.now()
                                    save_user_states(user_states)
                                except Exception as e:
                                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")
                continue
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check_deadline: {e}")


async def get_responsible_persons_for_project(project_name: str) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ API TrueTabs.
    Args:
        project_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü
    """
    try:
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
        projects = await fetch_data(
            "dstWYwyHfv92fusEup",  # ID —Ç–∞–±–ª–∏—Ü—ã "–ü—Ä–æ–µ–∫—Ç—ã"
            "viwTPHv90rDYx",      # ID –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã "–ü—Ä–æ–µ–∫—Ç—ã"
            ["–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ"]  # –ü–æ–ª—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        )

        if not projects:
            logging.info("–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return []

        # –ù–∞—Ö–æ–¥–∏–º recordIds –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        responsible_record_ids = []
        for project in projects:
            if project.get('fields', {}).get('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞') == project_name:
                responsible_record_ids = project['fields'].get('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ', [])
                break

        if not responsible_record_ids:
            logging.info(f"–î–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü")
            return []

        # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∏—Ö recordId
        employee_map = await get_employee_details(responsible_record_ids)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü
        responsible_persons = [employee_map.get(record_id) for record_id in responsible_record_ids]
        responsible_persons = [name for name in responsible_persons if name]  # –£–±–∏—Ä–∞–µ–º None

        return responsible_persons

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")
        return []

async def get_employee_details(record_ids):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –ø–æ –∏—Ö recordId.
    Args:
        record_ids (list): –°–ø–∏—Å–æ–∫ recordId —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    Returns:
        dict: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ recordId -> –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        headers = {'Authorization': f'Bearer {TRUETABS_TOKEN}'}
        params = {
            'viewId': 'viw5Kn9wvip4E',  # ID –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"
            'filterByFormula': f'recordId() IN ({",".join(f"'{id}'" for id in record_ids)})',
            'fields': ['–§–ò–û']
        }

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.get(
            f"{TRUETABS_BASE_URL}/fusion/v1/datasheets/dstbuj1jk5ZgFAP3V1/records",
            headers=headers,
            params=params
        )

        if response.status_code != 200:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.status_code} - {response.text}")
            return {}

        data = response.json()
        employees = data.get('items', [])

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ recordId -> –§–ò–û
        employee_map = {emp['recordId']: emp['fields'].get('–§–ò–û', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') for emp in employees}

        return employee_map

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö: {e}")
        return {}


@dp.message(Command("status"))
async def status_command(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        user_id = str(message.from_user.id)
        state = user_states.get(user_id)

        if not state:
            await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
            return

        email = state.get("email", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        smtp_server = state.get("smtp_server", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        smtp_port = state.get("smtp_port", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        imap_server = state.get("imap_server", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        imap_port = state.get("imap_port", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        await message.answer(
            f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"üìß Email: {email}\n"
            f"üì§ SMTP —Å–µ—Ä–≤–µ—Ä: {smtp_server}:{smtp_port}\n"
            f"üì• IMAP —Å–µ—Ä–≤–µ—Ä: {imap_server}:{imap_port}"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ status: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


# –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å IMAP –¥–∞–Ω–Ω—ã—Ö
@dp.message(Command("set_imap"))
async def set_imap(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /set_imap –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ IMAP —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ—Ä—Ç–∞.
    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            await message.answer(
                "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /set_imap:\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä) /set_imap imap.example.com 993"
            )
            return

        imap_server = args[1].strip().strip('<>')  # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ <>
        try:
            imap_port = int(args[2].strip().strip('<>'))
        except ValueError:
            await message.answer("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 993)")
            return

        user_id = str(message.from_user.id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in user_states:
            user_states[user_id] = {
                "access": True,
                "email": None,
                "email_password": None,
                "smtp_server": None,
                "smtp_port": None,
                "imap_server": None,
                "imap_port": None,
                "last_reminders": {}
            }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        current_imap_server = user_states[user_id].get("imap_server")
        current_imap_port = user_states[user_id].get("imap_port")

        if current_imap_server and current_imap_port:
            await message.answer(
                f"‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IMAP:\n"
                f"üåê –°–µ—Ä–≤–µ—Ä: {current_imap_server}\n"
                f"üìç –ü–æ—Ä—Ç: {current_imap_port}\n"
                f"–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            user_states[user_id]["temp_data"] = {
                "new_imap_server": imap_server,
                "new_imap_port": imap_port,
                "action": "set_imap"
            }
            save_user_states(user_states)
            return

        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ
        user_states[user_id]["imap_server"] = imap_server
        user_states[user_id]["imap_port"] = imap_port
        save_user_states(user_states)
        await message.answer(
            f"‚úÖ IMAP —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n"
            f"–°–µ—Ä–≤–µ—Ä: {imap_server}\n"
            f"–ü–æ—Ä—Ç: {imap_port}"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ set_imap: {e}")
        await message.answer(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_a_form
@dp.message(Command("send_a_form"))
async def send_form_command(message: types.Message):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –æ—Ç–∫–ª–∏–∫–∞.
    """
    try:
        user_id = str(message.from_user.id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
        if user_id not in user_states:
            user_states[user_id] = {
                "access": True,
                "temp_data": {}
            }

        user_states[user_id]["temp_data"] = {"waiting_for_name": True}
        save_user_states(user_states)

        await message.answer(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–ò–º—è –§–∞–º–∏–ª–∏—è</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤</i>",
            parse_mode="HTML"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ send_a_form: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
@dp.message(lambda message: str(message.from_user.id) in user_states and
                            user_states[str(message.from_user.id)].get("temp_data", {}).get("waiting_for_name", False))
async def process_name_input(message: types.Message):
    try:
        user_id = str(message.from_user.id)
        full_name = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã –∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
        if len(full_name.split()) < 2:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        response_text = (
            f"{full_name}, –í—ã –ø—Ä–æ—è–≤–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏. "
            f"–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ [—Ñ–æ—Ä–º—É](https://true.tabs.sale/share/shrLoN6LlnbLKjxVLYE4Z).\n\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è —Å—Å—ã–ª–∫–∏
        await message.answer(
            response_text,
            parse_mode="Markdown",
            disable_web_page_preview=False
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id]["temp_data"] = {}
        save_user_states(user_states)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /send_a_form.")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—á—Ç—ã
async def check_email_settings(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id (str): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        tuple: (bool, str) - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    """
    try:
        state = user_states.get(str(user_id))
        if not state:
            return False, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        email = state.get("email")
        password = state.get("email_password")
        smtp_server = state.get("smtp_server")
        smtp_port = state.get("smtp_port")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not all([email, password, smtp_server, smtp_port]):
            return False, "–ù–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            with smtplib.SMTP_SSL(smtp_server, smtp_port) if smtp_port == 465 else smtplib.SMTP(smtp_server, smtp_port) as server:
                if smtp_port != 465:
                    server.starttls()
                server.login(email, password)
                logging.info(f"‚úÖ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ SMTP: {e}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            mail = imaplib.IMAP4_SSL(IMAP_SERVER)
            mail.login(email, password)
            mail.logout()
            logging.info(f"‚úÖ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ IMAP: {e}"
        
        return True, "–í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç"
        
    except Exception as e:
        return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_credentials
@dp.message(Command("set_credentials"))
async def set_credentials(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /set_credentials –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ email –∏ –ø–∞—Ä–æ–ª—è.
    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
                "/set_credentials email –ø–∞—Ä–æ–ª—å"
            )
            return

        email_address = args[1].strip()
        password = args[2].strip()
        user_id = str(message.from_user.id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in user_states:
            user_states[user_id] = {
                "access": True,
                "email": None,
                "email_password": None,
                "smtp_server": None,
                "smtp_port": None,
                "imap_server": None,
                "imap_port": None,
                "last_reminders": {}
            }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        current_email = user_states[user_id].get("email")
        current_password = user_states[user_id].get("email_password")

        if current_email and current_password:
            await message.answer(
                f"‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                f"üìß Email: {current_email}\n"
                f"üîë –ü–∞—Ä–æ–ª—å: {'*' * len(current_password)}\n"
                f"–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            user_states[user_id]["temp_data"] = {
                "new_email": email_address,
                "new_password": password,
                "action": "set_credentials"
            }
            save_user_states(user_states)
            return

        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ
        user_states[user_id]["email"] = email_address
        user_states[user_id]["email_password"] = password
        save_user_states(user_states)
        await message.answer(
            "‚úÖ Email –∏ –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            "–¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SMTP —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "/set_smtp –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–µ—Ä–≤–µ—Ä –ø–æ—Ä—Ç"
        )
        # –£–¥–∞–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ set_credentials: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_settings
@dp.message(Command("check_settings"))
async def check_settings(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    try:
        user_id = str(message.from_user.id)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏—è
        progress_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP
        await progress_msg.edit_text("üîå –ü—Ä–æ–≤–µ—Ä—è—é SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        smtp_ok, smtp_msg = await check_smtp_connection(
            user_states[user_id]["email"],
            user_states[user_id]["email_password"],
            user_states[user_id]["smtp_server"],
            user_states[user_id]["smtp_port"]
        )

        if not smtp_ok:
            await progress_msg.edit_text(f"‚ùå SMTP –æ—à–∏–±–∫–∞: {smtp_msg}")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IMAP
        await progress_msg.edit_text("üì® –ü—Ä–æ–≤–µ—Ä—è—é IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        imap_ok, imap_msg = await check_imap_connection(
            user_states[user_id]["email"],
            user_states[user_id]["email_password"]
        )

        if not imap_ok:
            await progress_msg.edit_text(f"‚ùå IMAP –æ—à–∏–±–∫–∞: {imap_msg}")
            return

        # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await progress_msg.edit_text(
            "‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!\n\n"
            f"SMTP: {user_states[user_id]['smtp_server']}:{user_states[user_id]['smtp_port']}\n"
            f"IMAP: {IMAP_SERVER}"
        )

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ check_settings")
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_smtp
@dp.message(Command("set_smtp"))
async def set_smtp(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SMTP —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            await message.answer(
                "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /set_smtp:\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: \n(–Ω–∞–ø—Ä–∏–º–µ—Ä) /set_smtp smtp.example.com 465"
            )
            return
        smtp_server = args[1].strip().strip('<>')  # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ <>
        try:
            smtp_port = int(args[2].strip().strip('<>'))
        except ValueError:
            await message.answer("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 465 –∏–ª–∏ 587)")
            return
        user_id = str(message.from_user.id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in user_states:
            user_states[user_id] = {
                "access": True,
                "email": None,
                "email_password": None,
                "smtp_server": None,
                "smtp_port": None,
                "last_reminders": {}
            }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        current_smtp_server = user_states[user_id].get("smtp_server")
        current_smtp_port = user_states[user_id].get("smtp_port")

        if current_smtp_server and current_smtp_port:
            await message.answer(
                f"‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP:\n"
                f"üåê –°–µ—Ä–≤–µ—Ä: {current_smtp_server}\n"
                f"üìç –ü–æ—Ä—Ç: {current_smtp_port}\n"
                f"–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            user_states[user_id]["temp_data"] = {
                "new_smtp_server": smtp_server,
                "new_smtp_port": smtp_port,
                "action": "set_smtp"
            }
            save_user_states(user_states)
            return

        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ
        user_states[user_id]["smtp_server"] = smtp_server
        user_states[user_id]["smtp_port"] = smtp_port
        save_user_states(user_states)
        await message.answer(
            f"‚úÖ SMTP —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n"
            f"–°–µ—Ä–≤–µ—Ä: {smtp_server}\n"
            f"–ü–æ—Ä—Ç: {smtp_port}"
            "–¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ IMAP —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "/set_imap –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–µ—Ä–≤–µ—Ä –ø–æ—Ä—Ç"
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ set_smtp")
        await message.answer(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


async def check_imap_connection_async(email: str, password: str, imap_server: str, imap_port: int) -> tuple[bool, str]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
    Args:
        email (str): Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password (str): –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        imap_server (str): IMAP —Å–µ—Ä–≤–µ—Ä
        imap_port (int): –ü–æ—Ä—Ç IMAP —Å–µ—Ä–≤–µ—Ä–∞
    Returns:
        tuple[bool, str]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def test_connection():
            try:
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É
                mail = imaplib.IMAP4_SSL(imap_server, imap_port, timeout=10)
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
                mail.login(email, password)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏
                status, folders = mail.list()
                if status != "OK":
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫")
                mail.logout()
                return True, ""
            except Exception as e:
                return False, str(e)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, test_connection)
    except Exception as e:
        return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

async def check_smtp_connection_async(email: str, password: str, smtp_server: str, smtp_port: int) -> tuple[bool, str]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def test_connection():
            try:
                if smtp_port == 465:
                    with smtplib.SMTP_SSL(smtp_server, smtp_port, timeout=10) as server:
                        server.login(email, password)
                else:
                    with smtplib.SMTP(smtp_server, smtp_port, timeout=10) as server:
                        server.starttls()
                        server.login(email, password)
                return True, ""
            except Exception as e:
                return False, str(e)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, test_connection)

    except Exception as e:
        return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏–∑ TrueTabs
async def get_deadlines():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ API TrueTabs.
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    headers = {
        'Authorization': f'Bearer {TRUETABS_TOKEN}',
        'Content-Type': 'application/json'
    }
    
    params = {
        'viewId': 'viwTPHv90rDYx',
        'pageNum': 1,
        'pageSize': 100
    }
    
    try:
        response = requests.get(
            f"{TRUETABS_BASE_URL}/fusion/v1/datasheets/dstWYwyHfv92fusEup/records",
            headers=headers,
            params=params
        )
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        data = response.json()
        
        if 'data' not in data:
            logging.error("–û—à–∏–±–∫–∞: –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'data'")
            logging.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
            return []
            
        if 'records' not in data['data']:
            logging.error("–û—à–∏–±–∫–∞: –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'records'")
            return []
            
        deadlines = []
        for record in data['data']['records']:
            fields = record.get('fields', {})
            project_name = fields.get('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')
            current_spending = fields.get('–¢–µ–∫—É—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É')
            deadline = fields.get('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è')
            
            if project_name and deadline:
                deadlines.append((project_name, current_spending, deadline))
        
        return deadlines
        
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return []
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
        return []
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
async def check_new_email():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –≤ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É
        mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        mail.login(BOT_EMAIL, BOT_EMAIL_PASSWORD)
        mail.select('inbox')
        
        # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        _, message_numbers = mail.search(None, 'UNSEEN')
        
        if not message_numbers[0]:
            logging.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º")
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–∏—Å—å–º–æ
        for num in message_numbers[0].split():
            try:
                _, msg_data = mail.fetch(num, '(RFC822)')
                email_body = msg_data[0][1]
                email_message = email.message_from_bytes(email_body)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Å—å–º–µ
                subject = email_message["subject"]
                sender = email_message["from"]
                date = email_message["date"]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
                message = (
                    f"üìß –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ!\n"
                    f"–û—Ç: {sender}\n"
                    f"–¢–µ–º–∞: {subject}\n"
                    f"–î–∞—Ç–∞: {date}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –¥–æ—Å—Ç—É–ø–æ–º
                for user_id, state in user_states.items():
                    if state.get('access', False):
                        try:
                            await bot.send_message(chat_id=user_id, text=message)
                            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∏—Å—å–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                            
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏—Å—å–º–∞: {e}")
                continue
                
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        mail.close()
        mail.logout()
        
    except imaplib.IMAP4.error as e:
        logging.error(f"–û—à–∏–±–∫–∞ IMAP: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}")
        try:
            mail.logout()
        except:
            pass

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
@dp.message(Command("generate_report"))
async def generate_comprehensive_report(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await message.answer("‚åõ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞...")

        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        employees = await fetch_data("dstbuj1jk5ZgFAP3V1", "viw5Kn9wvip4E",
                                     ["–§–ò–û", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ –≤—ã—á–µ—Ç–∞ –ù–î–°", "–ü—Ä–æ–µ–∫—Ç—ã", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"])

        projects = await fetch_data("dstWYwyHfv92fusEup", "viwTPHv90rDYx",
                                    ["–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "–¢–µ–∫—É—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ"])

        vacancies = await fetch_data("dst8rGb4aS0aF9Rkx2", "viwwKq1FQM30f",
                                     ["–í–∞–∫–∞–Ω—Å–∏—è"])

        if not all([employees, projects, vacancies]):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü")
            return

        # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        vacancies_dict = {v['recordId']: v['fields']['–í–∞–∫–∞–Ω—Å–∏—è'] for v in vacancies if 'fields' in v}
        projects_dict = {p['recordId']: {
            'name': p['fields']['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'],
            'cost': p['fields'].get('–¢–µ–∫—É—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã', 0)
        } for p in projects if 'fields' in p}

        report_data = []
        dismissed_data = []  # –î–ª—è —É–≤–æ–ª–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        total_salary = 0
        total_dismissed_salary = 0
        project_costs = {}

        for emp in employees:
            if 'fields' not in emp:
                continue

            emp_fields = emp['fields']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            category = emp_fields.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '')
            is_dismissed = category == '–£–≤–æ–ª–µ–Ω'

            position_ids = emp_fields.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', [])
            position_id = position_ids[0] if isinstance(position_ids, list) and position_ids else position_ids

            employee = {
                'name': emp_fields.get('–§–ò–û', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'position': vacancies_dict.get(position_id, "–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
                'salary': float(emp_fields.get('–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ –≤—ã—á–µ—Ç–∞ –ù–î–°', 0)),
                'projects': [],
                'dismissed': is_dismissed
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
            if is_dismissed:
                total_dismissed_salary += employee['salary']
                dismissed_data.append(employee)
            else:
                total_salary += employee['salary']
                report_data.append(employee)

            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–≤–∫–ª—é—á–∞—è —É–≤–æ–ª–µ–Ω–Ω—ã—Ö)
            for project_id in emp_fields.get('–ü—Ä–æ–µ–∫—Ç—ã', []):
                if project_id in projects_dict:
                    project_name = projects_dict[project_id]['name']
                    employee['projects'].append(project_name)

                    if not is_dismissed:  # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ç—Ä–∞—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö
                        if project_name not in project_costs:
                            project_costs[project_name] = 0
                        project_costs[project_name] += employee['salary']

        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        doc = Document()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        doc.add_heading('–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç', 0)
        doc.add_paragraph(f"–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö)
        doc.add_heading('–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)', level=1)
        doc.add_paragraph(f"–û–±—â–∏–π —Ñ–æ–Ω–¥ –∑–∞—Ä–ø–ª–∞—Ç: {total_salary:,.2f} ‚ÇΩ", style='IntenseQuote')
        doc.add_paragraph(f"–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {total_salary / len(report_data):,.2f} ‚ÇΩ" if report_data else "0 ‚ÇΩ")

        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        doc.add_heading('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (—Ä–∞–±–æ—Ç–∞—é—â–∏–µ)', level=1)
        if report_data:
            table = doc.add_table(rows=1, cols=4)
            table.style = 'Table Grid'

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            hdr = table.rows[0].cells
            hdr[0].text = '–§–ò–û'
            hdr[1].text = '–î–æ–ª–∂–Ω–æ—Å—Ç—å'
            hdr[2].text = '–ó–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)'
            hdr[3].text = '–ü—Ä–æ–µ–∫—Ç–æ–≤'

            # –î–∞–Ω–Ω—ã–µ
            for emp in sorted(report_data, key=lambda x: x['salary'], reverse=True):
                row = table.add_row().cells
                row[0].text = emp['name']
                row[1].text = emp['position']
                row[2].text = f"{emp['salary']:,.2f}"
                row[3].text = str(len(emp['projects']))
        else:
            doc.add_paragraph("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö", style='IntenseQuote')

        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        doc.add_heading('–£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö (—Ä–∞–±–æ—Ç–∞—é—â–∏–µ)', level=1)
        for emp in report_data:
            doc.add_heading(emp['name'], level=2)
            doc.add_paragraph(f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {emp['position']}")
            doc.add_paragraph(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {emp['salary']:,.2f} ‚ÇΩ")

            if emp['projects']:
                doc.add_paragraph("–ü—Ä–æ–µ–∫—Ç—ã:", style='Heading3')
                for project in emp['projects']:
                    doc.add_paragraph(f"‚Ä¢ {project}", style='ListBullet')
            else:
                doc.add_paragraph("–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö", style='IntenseQuote')

            doc.add_paragraph()

        # –ó–∞—Ç—Ä–∞—Ç—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º (—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ)
        doc.add_heading('–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã (—Ä–∞–±–æ—Ç–∞—é—â–∏–µ)', level=1)
        if project_costs:
            cost_table = doc.add_table(rows=1, cols=3)
            cost_table.style = 'Light Shading'

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            hdr = cost_table.rows[0].cells
            hdr[0].text = '–ü—Ä–æ–µ–∫—Ç'
            hdr[1].text = '–ó–∞—Ç—Ä–∞—Ç—ã (‚ÇΩ)'
            hdr[2].text = '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'

            # –î–∞–Ω–Ω—ã–µ
            for project, cost in sorted(project_costs.items(), key=lambda x: x[1], reverse=True):
                row = cost_table.add_row().cells
                row[0].text = project
                row[1].text = f"{cost:,.2f}"
                row[2].text = str(sum(1 for emp in report_data if project in emp['projects']))
        else:
            doc.add_paragraph("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ç—Ä–∞—Ç–∞—Ö –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã", style='IntenseQuote')

        # –†–∞–∑–¥–µ–ª –¥–ª—è —É–≤–æ–ª–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if dismissed_data:
            doc.add_heading('–£–≤–æ–ª–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', level=1)
            doc.add_paragraph(f"–û–±—â–∏–π —Ñ–æ–Ω–¥ –∑–∞—Ä–ø–ª–∞—Ç —É–≤–æ–ª–µ–Ω–Ω—ã—Ö: {total_dismissed_salary:,.2f} ‚ÇΩ", style='IntenseQuote')

            dismissed_table = doc.add_table(rows=1, cols=4)
            dismissed_table.style = 'Table Grid'

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            hdr = dismissed_table.rows[0].cells
            hdr[0].text = '–§–ò–û'
            hdr[1].text = '–î–æ–ª–∂–Ω–æ—Å—Ç—å'
            hdr[2].text = '–ó–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)'
            hdr[3].text = '–ü—Ä–æ–µ–∫—Ç–æ–≤'

            # –î–∞–Ω–Ω—ã–µ
            for emp in sorted(dismissed_data, key=lambda x: x['salary'], reverse=True):
                row = dismissed_table.add_row().cells
                row[0].text = emp['name']
                row[1].text = emp['position']
                row[2].text = f"{emp['salary']:,.2f}"
                row[3].text = str(len(emp['projects']))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        report_path = f"full_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
        doc.save(report_path)

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
        await message.answer_document(
            FSInputFile(report_path),
            caption="üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç"
        )

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")


async def fetch_data(datasheet_id, view_id, fields):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API"""
    try:
        headers = {'Authorization': f'Bearer {TRUETABS_TOKEN}'}
        params = {
            'viewId': view_id,
            'pageSize': 1000,
            'fields': fields,
            'fieldKey': 'name'
        }

        response = requests.get(
            f"{TRUETABS_BASE_URL}/fusion/v1/datasheets/{datasheet_id}/records",
            headers=headers,
            params=params
        )
        response.raise_for_status()

        return response.json().get('data', {}).get('records', [])

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {datasheet_id}: {e}")
        return None


async def send_email(to_email: str, subject: str, body: str, user_id: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        state = user_states.get(str(user_id))
        if not state:
            logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è user_id {user_id}")
            return False

        email = state.get("email")
        password = state.get("email_password")
        smtp_server = state.get("smtp_server")
        smtp_port = state.get("smtp_port")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not all([email, password, smtp_server, smtp_port]):
            logging.error("–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SMTP –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            return False

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEText(body, 'plain', 'utf-8')
        msg['Subject'] = subject
        msg['From'] = email
        msg['To'] = to_email

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –æ—Ç {email} –∫ {to_email} —á–µ—Ä–µ–∑ {smtp_server}:{smtp_port}")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        try:
            if smtp_port == 465:
                with smtplib.SMTP_SSL(smtp_server, smtp_port, timeout=10) as server:
                    server.login(email, password)
                    server.send_message(msg)
            else:
                with smtplib.SMTP(smtp_server, smtp_port, timeout=10) as server:
                    server.starttls()
                    server.login(email, password)
                    server.send_message(msg)

            logging.info(f"–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}")
            return True

        except smtplib.SMTPRecipientsRefused as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")
        except smtplib.SMTPException as e:
            logging.error(f"SMTP –æ—à–∏–±–∫–∞: {e}")
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", exc_info=True)

        return False

    except Exception as e:
        logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_email: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
async def check_candidates_status():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
    """
    try:
        headers = {
            'Authorization': f'Bearer {TRUETABS_TOKEN}',
            'Content-Type': 'application/json'
        }
        
        response = requests.get(
            f"{TRUETABS_BASE_URL}/fusion/v1/datasheets/dstWYwyHfv92fusEup/records",
            headers=headers,
            params={
                'viewId': 'viwTPHv90rDYx',
                'pageNum': 1,
                'pageSize': 100
            }
        )
        
        if response.status_code != 200:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö: {response.status_code}")
            return

        data = response.json()
        if 'data' not in data:
            logging.error("–û—à–∏–±–∫–∞: –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'data'")
            logging.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
            return
            
        if 'records' not in data['data']:
            logging.error("–û—à–∏–±–∫–∞: –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'records'")
            return

        candidates = data['data']['records']
        
        for candidate in candidates:
            try:
                fields = candidate.get('fields', {})
                status = fields.get('–°—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞')
                
                if status == '–û–∂–∏–¥–∞–µ—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ':
                    email = fields.get('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞')
                    name = fields.get('–§–ò–û', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
                    interview_date = fields.get('–î–∞—Ç–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è')
                    interview_time = fields.get('–í—Ä–µ–º—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è')
                    
                    if all([email, interview_date, interview_time]):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–∞–Ω–¥–∏–¥–∞—Ç—É
                        subject = "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"
                        body = f"""
                        –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {name}!

                        –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è {interview_date} –≤ {interview_time}.

                        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
                        HR –∫–æ–º–∞–Ω–¥–∞
                        """
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ—Å—Ç—É–ø–æ–º
                        for user_id in user_states:
                            if user_states[user_id].get('access', False):
                                if await send_email(email, subject, body, user_id):
                                    break  # –ï—Å–ª–∏ –ø–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
                                    
                    else:
                        logging.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {name}")
                        
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
                continue

    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
async def periodic_check():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –ø–∏—Å–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
    """
    try:
        while True:
            try:
                logging.info("–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                try:
                    projects = await retry_on_error(get_deadlines, max_retries=3, delay=5)
                    if projects:
                        await retry_on_error(check_deadline, max_retries=3, delay=5)
                    else:
                        logging.info("–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                try:
                    await retry_on_error(check_new_email, max_retries=3, delay=5)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                try:
                    await retry_on_error(check_candidates_status, max_retries=3, delay=5)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
                
                logging.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            finally:
                # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(600)
    except asyncio.CancelledError:
        logging.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        raise

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ smtp
async def check_smtp_connection(email: str, password: str, smtp_server: str, smtp_port: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {smtp_server}:{smtp_port}...")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if smtp_port == 465:
            server = smtplib.SMTP_SSL(smtp_server, smtp_port, timeout=10)
        else:
            server = smtplib.SMTP(smtp_server, smtp_port, timeout=10)
            logging.info("–ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º STARTTLS...")
            server.starttls()

        logging.info("–ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏...")
        server.login(email, password)
        server.quit()

        logging.info("SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        return True, "SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"

    except smtplib.SMTPAuthenticationError:
        error_msg = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ SMTP: –Ω–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        logging.error(error_msg)
        return False, error_msg
    except smtplib.SMTPConnectError:
        error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É {smtp_server}:{smtp_port}"
        logging.error(error_msg)
        return False, error_msg
    except Exception as e:
        error_msg = f"SMTP –æ—à–∏–±–∫–∞: {str(e)}"
        logging.error(error_msg, exc_info=True)
        return False, error_msg


async def check_imap_connection(email: str, password: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {IMAP_SERVER}...")
        mail = imaplib.IMAP4_SSL(IMAP_SERVER, timeout=10)
        mail.login(email, password)
        mail.logout()
        logging.info("IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        return True, "IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"

    except imaplib.IMAP4.error as e:
        error_msg = f"IMAP –æ—à–∏–±–∫–∞: {str(e)}"
        logging.error(error_msg)
        return False, error_msg
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è IMAP –æ—à–∏–±–∫–∞: {str(e)}"
        logging.error(error_msg, exc_info=True)
        return False, error_msg


@dp.message(lambda message: str(message.from_user.id) in user_states and
                            "temp_data" in user_states[str(message.from_user.id)] and
                            "action" in user_states[str(message.from_user.id)]["temp_data"])
async def handle_confirmation(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    try:
        user_id = str(message.from_user.id)
        temp_data = user_states[user_id]["temp_data"]
        action = temp_data.get("action")
        confirmation = message.text.strip().lower()

        if confirmation not in ["–¥–∞", "–Ω–µ—Ç"]:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
            return

        if confirmation == "–Ω–µ—Ç":
            # –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
            user_states[user_id]["temp_data"] = {}
            save_user_states(user_states)
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if action == "set_credentials":
            user_states[user_id]["email"] = temp_data["new_email"]
            user_states[user_id]["email_password"] = temp_data["new_password"]
            await message.answer(
                "‚úÖ Email –∏ –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
                "–¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SMTP —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "/set_smtp –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–µ—Ä–≤–µ—Ä –ø–æ—Ä—Ç"
            )
        elif action == "set_smtp":
            user_states[user_id]["smtp_server"] = temp_data["new_smtp_server"]
            user_states[user_id]["smtp_port"] = temp_data["new_smtp_port"]
            await message.answer(
                f"‚úÖ SMTP —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
                f"–°–µ—Ä–≤–µ—Ä: {temp_data['new_smtp_server']}\n"
                f"–ü–æ—Ä—Ç: {temp_data['new_smtp_port']}"
            )
        elif action == "set_imap":
            user_states[user_id]["imap_server"] = temp_data["new_imap_server"]
            user_states[user_id]["imap_port"] = temp_data["new_imap_port"]
            await message.answer(
                f"‚úÖ IMAP —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
                f"–°–µ—Ä–≤–µ—Ä: {temp_data['new_imap_server']}\n"
                f"–ü–æ—Ä—Ç: {temp_data['new_imap_port']}"
            )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_states[user_id]["temp_data"] = {}
        save_user_states(user_states)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP
async def check_imap_connection(email: str, password: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {email}...")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –∏ —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ SSL
        mail = imaplib.IMAP4_SSL(IMAP_SERVER, timeout=10)

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        logging.info(f"–ü—ã—Ç–∞—é—Å—å –≤–æ–π—Ç–∏... (—Å–µ—Ä–≤–µ—Ä: {IMAP_SERVER})")

        # –Ø–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        try:
            mail.login(email, password)
        except imaplib.IMAP4.error as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ IMAP: {str(e)}"
            if "AUTHENTICATIONFAILED" in str(e):
                error_msg += "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n1. –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å\n2. IMAP –æ—Ç–∫–ª—é—á—ë–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ—á—Ç—ã\n3. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            logging.error(error_msg)
            return False, error_msg

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏
        status, folders = mail.list()
        if status == "OK":
            logging.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏: {', '.join(f.decode() for f in folders[:3])}...")
        else:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫")

        mail.logout()
        logging.info("IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        return True, "IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"

    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è IMAP –æ—à–∏–±–∫–∞: {str(e)}"
        logging.error(error_msg, exc_info=True)
        return False, error_msg

async def retry_on_error(func, *args, max_retries=3, delay=5):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    
    Args:
        func (callable): –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
        max_retries (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay (int): –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    """
    for attempt in range(max_retries):
        try:
            return await func(*args)
        except Exception as e:
            if attempt == max_retries - 1:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                return None
            logging.error(f"–û—à–∏–±–∫–∞: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(delay)

async def run_with_recovery():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫.
    """
    while True:
        try:
            logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            check_task = asyncio.create_task(periodic_check())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            await dp.start_polling(bot, skip_updates=True)
            
        except KeyboardInterrupt:
            logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logging.error("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            try:
                await bot.close()
            except:
                pass
            await asyncio.sleep(5)
            continue

if __name__ == '__main__':
    try:
        asyncio.run(run_with_recovery())  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        try:
            asyncio.run(bot.close())  # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞
        except:
            pass
